# stop if cmake version below 3.10.2
cmake_minimum_required(VERSION 3.10.2 FATAL_ERROR)

# Generate folders for IDE's
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

###########
# Options #
###########


###########
# Project #
###########

DESCRIPTION("Low level header only C++11 RAII wrapper classes for the OpenCL API. The RAII class design is heavily inspired by std::unique_ptr and is compatible with STL containers.")
# URL is 12
#  HOMEPAGE_URL https://github.com/Unarmed1000/RapidOpenCL

project(
  RapidOpenCL
  VERSION 1.2.0.0
  LANGUAGES CXX
)
# Disable project in-source buils
if("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
   message(SEND_ERROR "In-source builds are not permitted. Use a separate folder for building. Unfortunately some files might have been generated by cmake in this directory, please delete those before continuing.")
endif("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")

add_library(RapidOpenCL INTERFACE)

#Add an alias so that library can be used inside the build tree
add_library(RapidOpenCL::RapidOpenCL ALIAS RapidOpenCL)

# Attach headers
#target_sources(RapidOpenCL 
#  INTERFACE 
#  $<INSTALL_INTERFACE:include>
#  $<BUILD_INTERFACE:include>
#)

# Location of header files in this package
target_include_directories(RapidOpenCL
  INTERFACE
    $<INSTALL_INTERFACE:include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

################
# Dependencies #
################

find_package(OpenCL REQUIRED)

target_link_libraries(RapidOpenCL
  INTERFACE
    OpenCL::OpenCL
)

target_compile_features(RapidOpenCL
  INTERFACE
    cxx_std_11 # Enable C++11
)

#############################
# Installation instructions #
#############################

include(GNUInstallDirs)
set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/RapidOpenCL)

install(TARGETS RapidOpenCL
  EXPORT RapidOpenCLTargets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# Create a ConfigVersion.cmake file
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/RapidOpenCLConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

# Export the targets to a script
install(EXPORT RapidOpenCLTargets
  FILE RapidOpenCLTargets.cmake
  NAMESPACE RapidOpenCL::
  DESTINATION ${INSTALL_CONFIGDIR}
)

# Install the config, configversion and custom find modules
configure_file(RapidOpenCLConfig.cmake.in RapidOpenCLConfig.cmake @ONLY)
install(
  FILES
    "${CMAKE_CURRENT_BINARY_DIR}/RapidOpenCLConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/RapidOpenCLConfigVersion.cmake"
  DESTINATION ${INSTALL_CONFIGDIR}
)

#############
# Exporting #
#############

#export(
#  TARGETS
#    RapidOpenCL
#  NAMESPACE RapidOpenCL::
#  FILE RapidOpenCLTargets.cmake
#)
#
## Register package in user's package registry
#export(PACKAGE RapidOpenCL)
